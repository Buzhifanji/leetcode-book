const n=JSON.parse('{"key":"v-08f448cc","path":"/array/27.remove-element.html","title":"27.移除元素(remove-element)","lang":"zh-CN","frontmatter":{"title":"27.移除元素(remove-element)","date":"2020-07-14T10:38:52.000Z","category":["数组"],"tag":["数组","双指针"]},"headers":[{"level":2,"title":"题目","slug":"题目","link":"#题目","children":[]},{"level":2,"title":"题目链接","slug":"题目链接","link":"#题目链接","children":[]},{"level":2,"title":"题目大意","slug":"题目大意","link":"#题目大意","children":[]},{"level":2,"title":"解题思路","slug":"解题思路","link":"#解题思路","children":[]},{"level":2,"title":"代码","slug":"代码","link":"#代码","children":[]}],"git":{"createdTime":1658807850000,"updatedTime":1661233172000,"contributors":[{"name":"huangbin","email":"1127779503@qq.com","commits":4}]},"readingTime":{"minutes":1.85,"words":554},"filePathRelative":"array/27.remove-element.md","localizedDate":"2020年7月14日","excerpt":"<h2> 题目</h2>\\n<p>给你一个数组 nums&nbsp;和一个值 val，你需要 原地 移除所有数值等于&nbsp;val&nbsp;的元素，并返回移除后数组的新长度。</p>\\n<p>不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。</p>\\n<p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p>\\n<p><strong>说明：</strong></p>\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">说明</p>\\n<p>为什么返回数值是整数，但输出的答案是数组呢?</p>\\n<p>请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p>\\n<p>你可以想象内部操作如下:</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">// nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝</span>\\nint len <span class=\\"token operator\\">=</span> <span class=\\"token function\\">removeElement</span><span class=\\"token punctuation\\">(</span>nums<span class=\\"token punctuation\\">,</span> val<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// 在函数里修改输入数组对于调用者是可见的。</span>\\n<span class=\\"token comment\\">// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。</span>\\n<span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span>int i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> len<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">print</span><span class=\\"token punctuation\\">(</span>nums<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></div>"}');export{n as data};
