import{_ as e,W as t,X as p,Y as n,Z as o,$ as c,a0 as s,D as l}from"./framework-ee985c4f.js";const r={},i=s(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>给你一个 升序排列 的数组 nums ，请你 <strong>原地</strong> 删除重复出现的元素，使每个元素 <strong>只出现一次</strong> ，返回删除后数组的新长度。元素的 <strong>相对顺序</strong> 应该保持 <strong>一致</strong> 。</p><p>由于在某些语言中不能改变数组的长度，所以必须将结果放在数组nums的第一部分。更规范地说，如果在删除重复项之后有 k 个元素，那么 nums 的前 k 个元素应该保存最终结果。</p><p>将最终结果插入 nums 的前 k 个位置后返回 k 。</p><p>不要使用额外的空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。</p><p>判题标准:</p><p>系统会用下面的代码来测试你的题解:</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>int[] nums = [...]; // 输入数组</p><p>int[] expectedNums = [...]; // 长度正确的期望答案</p><p>int k = removeDuplicates(nums); // 调用</p><p>assert k == expectedNums.length;</p><p>for (int i = 0; i &lt; k; i++) {</p><pre><code>assert nums[i] == expectedNums[i];
</code></pre><p>}</p></div><p>如果所有断言都通过，那么您的题解将被 通过。</p><p><strong>例子</strong></p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>输入：nums = [1,1,2]</p><p>输出：2, nums = [1,2,_]</p><p>解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。</p></div><h2 id="题目链接" tabindex="-1"><a class="header-anchor" href="#题目链接" aria-hidden="true">#</a> 题目链接</h2>`,12),u={href:"https://leetcode.cn/problems/remove-duplicates-from-sorted-array/",target:"_blank",rel:"noopener noreferrer"},d=s(`<h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>不利用额外的空间，删除数组的重复的元素，并且删除后数组的相对顺序不改f变，结果返回删除后的数组长度</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>因为不能使用额外的空间，所有<code>哈希集合 Set</code>去重的方案行不通。</p><p>首先数组是有序的，那么相同的元素一定是相邻的。</p><p>要求是删除重复的元素，那么实际上就是<strong>把不重复的元素移动到左边</strong>。</p><p>由于只在原地修改数组，我们可以借助<code>双指针</code>来解决这题。</p><p>一个指针记录移动到左边的位置，记住<code>slow</code>;另一个查找不重复的元素位置，记住<code>fast</code>。算法流程如下：</p><p>比较<code>slow</code>和<code>fast</code>是否相等，</p><p>如果相等，则 fast++ 继续下一轮查找， 反之 把<code>fast</code>位置上的元素复制到<code>slow</code>位置上，然后 slow++ 继续下一轮查找</p><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">removeDuplicates</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> len<span class="token punctuation">;</span>

  <span class="token keyword">let</span> fast <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 快指针</span>
    slow <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 慢指针</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span> <span class="token operator">!==</span> nums<span class="token punctuation">[</span>fast <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">;</span>
      slow<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    fast<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> slow<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12);function k(m,v){const a=l("ExternalLinkIcon");return t(),p("div",null,[i,n("p",null,[n("a",u,[o("https://leetcode.cn/problems/remove-duplicates-from-sorted-array/"),c(a)])]),d])}const b=e(r,[["render",k],["__file","26.remove-duplicates-from-sorted-array.html.vue"]]);export{b as default};
