import{_ as c}from"./PascalTriangleAnimated2-6c416da5.js";import{_ as l,W as r,X as i,Y as n,Z as s,$ as a,a1 as u,a0 as p,D as t}from"./framework-ee985c4f.js";const d={},k=p('<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>给定一个非负索引 rowIndex，返回「杨辉三角」的第 rowIndex 行。</p><p>在「杨辉三角」中，每个数是它左上方和右上方的数的和。</p><p><img src="'+c+'" alt="杨辉三角"></p><p><strong>例子</strong></p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>输入：rowIndex = 3</p><p>输出：[1,3,3,1]</p></div><h2 id="题目链接" tabindex="-1"><a class="header-anchor" href="#题目链接" aria-hidden="true">#</a> 题目链接</h2>',7),m={href:"https://leetcode.cn/problems/pascals-triangle-ii/",target:"_blank",rel:"noopener noreferrer"},h=n("h2",{id:"题目大意",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#题目大意","aria-hidden":"true"},"#"),s(" 题目大意")],-1),v={href:"https://zh.m.wikipedia.org/zh-hans/%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92%E5%BD%A2",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"rowIndex",-1),b=n("h2",{id:"解题思路",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#解题思路","aria-hidden":"true"},"#"),s(" 解题思路")],-1),f=n("code",null,"rowIndex",-1),w=n("code",null,"O(1)",-1),x=p(`<h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">numRows</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">getRow</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">rowIndex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rowIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> cur <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      cur<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> result<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    result <span class="token operator">=</span> cur<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function g(y,I){const e=t("ExternalLinkIcon"),o=t("RouterLink");return r(),i("div",null,[k,n("p",null,[n("a",m,[s("https://leetcode.cn/problems/pascals-triangle-ii/"),a(e)])]),h,n("p",null,[s("输出"),n("a",v,[s("杨辉三角形"),a(e)]),_,s("对应的元素数组")]),b,n("p",null,[a(o,{to:"/array/118.pascals-triangle.html"},{default:u(()=>[s("杨辉三角")]),_:1}),s("，输出的全部元素，我们这题只需要输出"),f,s("对应的元素数组，所以空间复杂度可以优化为"),w]),x])}const B=l(d,[["render",g],["__file","119.pascals-triangle-ii.html.vue"]]);export{B as default};
